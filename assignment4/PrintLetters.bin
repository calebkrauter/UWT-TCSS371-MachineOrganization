; Caleb Krauter
; Prints the alphabet in decending order and ascending order without stopping betweeen outputs.

; create a loop that increments through all ascii values of the alphabet and then branch to decrement through the values.

; Origin
0011 0000 0000 0000     ; Start at  x3000

; Clear some registers  R0, R1, R2, R3, R4, R5, R6, R7
0101 000 000 1 00000 ; R0
0101 001 001 1 00111 ; R1
0101 010 010 1 00000 ; R2
0101 011 011 1 00000 ; R3
0101 100 100 1 00000 ; R4
0101 101 101 1 00000 ; R5
0101 110 110 1 00000 ; R6
0101 111 111 1 00000 ; R7


;0001 000 001 1 00000 ; R0 <- R0 + #7
;0010 0001 this is the hex value used for the trap vector, in ascii this is '!' and that is all that it prints.
;0011 000 0 1111 1011 ; store into some x3105 the value from R1
0010 000 000000000
0000000001011010
0001 000 000 1 11111
;0011 000 0 0000 0010; Load into R0 from next address
;0001 001 001 1 00001 ; store 1 into R1
; See if values should be stored in any registers and which values

; do while incrementing starting at 65 until 90, if 90 decrement until 65


; Start with outputting a value.



; LC-3 machine code I/O example
;
; in a loop, capture a character from the keyboard
; echo the character to the monitor
; exit the loop if ASCII zero is entered

;0011 0000 0000 0000     ; Start at x3000

1111 0000 0010 0001    ; TRAP x21 : OUT

;0010 001 000000011      ; LD 2's comp of ASCII zero into R1
;0001 010 001 0 00 000   ; ADD 2's comp of ASCII zero and the user input, put in R2

;0000 101 111111100      ; BR loop back for another character

1111 0000 0010 0101     ; Halt x25
;0000000001000001
;put an ascii value here and use the PCoffset to access this and load it into R0 on line 23.
;1111 1111 1101 0000     ; ASCII zero is x30 in binary 0000 0000 0011 0000
                        ; 2's comp of ASCII zero      1111 1111 1101 0000